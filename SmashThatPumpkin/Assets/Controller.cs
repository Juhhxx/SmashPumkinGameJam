//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""Controller1"",
            ""id"": ""b6bf3b33-2804-4400-a5fc-d2dc3e57045e"",
            ""actions"": [
                {
                    ""name"": ""Smash"",
                    ""type"": ""Button"",
                    ""id"": ""23e7d140-5b52-45c2-9316-db54dc732149"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dismiss"",
                    ""type"": ""Button"",
                    ""id"": ""11b3c18e-d034-44fc-bbe2-0de7728bc37a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovePlayer2"",
                    ""type"": ""Button"",
                    ""id"": ""325036e6-ff2b-4d0a-8a01-465bf56f41d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovePlayer3"",
                    ""type"": ""Button"",
                    ""id"": ""36a68ccd-0c0c-4d52-867f-4c073b4e1610"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovePlayer4"",
                    ""type"": ""Button"",
                    ""id"": ""13f0daa6-9e7b-4722-bb33-6363d028f484"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4b4c6795-976d-46c1-ba8d-0d8579e49261"",
                    ""path"": ""<DualShockGamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Smash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""804bf1c9-73aa-47dd-8782-b9c686ee30c9"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dismiss"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09db5b74-427e-4d92-accb-7eed1e3e4c52"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3829b0a-49ba-4136-8061-34e991d0bc5c"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f8c6c54-a080-4edd-a7ed-0cc2d9146201"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controller1
        m_Controller1 = asset.FindActionMap("Controller1", throwIfNotFound: true);
        m_Controller1_Smash = m_Controller1.FindAction("Smash", throwIfNotFound: true);
        m_Controller1_Dismiss = m_Controller1.FindAction("Dismiss", throwIfNotFound: true);
        m_Controller1_MovePlayer2 = m_Controller1.FindAction("MovePlayer2", throwIfNotFound: true);
        m_Controller1_MovePlayer3 = m_Controller1.FindAction("MovePlayer3", throwIfNotFound: true);
        m_Controller1_MovePlayer4 = m_Controller1.FindAction("MovePlayer4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controller1
    private readonly InputActionMap m_Controller1;
    private List<IController1Actions> m_Controller1ActionsCallbackInterfaces = new List<IController1Actions>();
    private readonly InputAction m_Controller1_Smash;
    private readonly InputAction m_Controller1_Dismiss;
    private readonly InputAction m_Controller1_MovePlayer2;
    private readonly InputAction m_Controller1_MovePlayer3;
    private readonly InputAction m_Controller1_MovePlayer4;
    public struct Controller1Actions
    {
        private @Controller m_Wrapper;
        public Controller1Actions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Smash => m_Wrapper.m_Controller1_Smash;
        public InputAction @Dismiss => m_Wrapper.m_Controller1_Dismiss;
        public InputAction @MovePlayer2 => m_Wrapper.m_Controller1_MovePlayer2;
        public InputAction @MovePlayer3 => m_Wrapper.m_Controller1_MovePlayer3;
        public InputAction @MovePlayer4 => m_Wrapper.m_Controller1_MovePlayer4;
        public InputActionMap Get() { return m_Wrapper.m_Controller1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Controller1Actions set) { return set.Get(); }
        public void AddCallbacks(IController1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Controller1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Controller1ActionsCallbackInterfaces.Add(instance);
            @Smash.started += instance.OnSmash;
            @Smash.performed += instance.OnSmash;
            @Smash.canceled += instance.OnSmash;
            @Dismiss.started += instance.OnDismiss;
            @Dismiss.performed += instance.OnDismiss;
            @Dismiss.canceled += instance.OnDismiss;
            @MovePlayer2.started += instance.OnMovePlayer2;
            @MovePlayer2.performed += instance.OnMovePlayer2;
            @MovePlayer2.canceled += instance.OnMovePlayer2;
            @MovePlayer3.started += instance.OnMovePlayer3;
            @MovePlayer3.performed += instance.OnMovePlayer3;
            @MovePlayer3.canceled += instance.OnMovePlayer3;
            @MovePlayer4.started += instance.OnMovePlayer4;
            @MovePlayer4.performed += instance.OnMovePlayer4;
            @MovePlayer4.canceled += instance.OnMovePlayer4;
        }

        private void UnregisterCallbacks(IController1Actions instance)
        {
            @Smash.started -= instance.OnSmash;
            @Smash.performed -= instance.OnSmash;
            @Smash.canceled -= instance.OnSmash;
            @Dismiss.started -= instance.OnDismiss;
            @Dismiss.performed -= instance.OnDismiss;
            @Dismiss.canceled -= instance.OnDismiss;
            @MovePlayer2.started -= instance.OnMovePlayer2;
            @MovePlayer2.performed -= instance.OnMovePlayer2;
            @MovePlayer2.canceled -= instance.OnMovePlayer2;
            @MovePlayer3.started -= instance.OnMovePlayer3;
            @MovePlayer3.performed -= instance.OnMovePlayer3;
            @MovePlayer3.canceled -= instance.OnMovePlayer3;
            @MovePlayer4.started -= instance.OnMovePlayer4;
            @MovePlayer4.performed -= instance.OnMovePlayer4;
            @MovePlayer4.canceled -= instance.OnMovePlayer4;
        }

        public void RemoveCallbacks(IController1Actions instance)
        {
            if (m_Wrapper.m_Controller1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IController1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Controller1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Controller1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Controller1Actions @Controller1 => new Controller1Actions(this);
    public interface IController1Actions
    {
        void OnSmash(InputAction.CallbackContext context);
        void OnDismiss(InputAction.CallbackContext context);
        void OnMovePlayer2(InputAction.CallbackContext context);
        void OnMovePlayer3(InputAction.CallbackContext context);
        void OnMovePlayer4(InputAction.CallbackContext context);
    }
}
